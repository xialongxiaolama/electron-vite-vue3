{"version":3,"file":"index.js","sources":["../../electron/main/index.ts"],"sourcesContent":["import { app, BrowserWindow, shell, ipcMain } from 'electron'\r\nimport { fileURLToPath } from 'node:url'\r\nimport path from 'node:path'\r\nimport os from 'node:os'\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main\r\n// │ │ └── index.js    > Electron-Main\r\n// │ └─┬ preload\r\n// │   └── index.mjs   > Preload-Scripts\r\n// ├─┬ dist\r\n// │ └── index.html    > Electron-Renderer\r\n//\r\n// import.meta.url 当前文件的路径\r\n// fileURLToPath 将url转换为文件路径 可以兼容跨平台\r\n// file:///D:/workspace/electron/electron-vite-vue/dist-electron/main/index.js 转化为 D:\\workspace\\electron\\electron-vite-vue\\dist-electron\\main\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\r\n\r\nprocess.env.APP_ROOT = path.join(__dirname, '../..')\r\n\r\n// 热更新文件路径\r\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')\r\n//打包静态文件\r\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')\r\n//vite 本地开发地址\r\nexport const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL //http://localhost:7366/\r\n\r\n\r\n// public目录 开发环境/生产环境\r\nconst VITE_PUBLIC = (process.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\r\n  ? path.join(process.env.APP_ROOT, 'public')\r\n  : RENDERER_DIST)\r\n\r\n//6.1的系统禁用硬盘加速\r\nif (os.release().startsWith('6.1')) app.disableHardwareAcceleration()\r\n\r\nlet win: BrowserWindow | null = null\r\nconst preload = path.join(__dirname, '../preload/index.mjs')\r\nconst indexHtml = path.join(RENDERER_DIST, 'index.html')\r\n\r\n\r\napp.whenReady().then(createWindow)\r\n\r\napp.on('window-all-closed', () => {\r\n  win = null\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\n//获取实例锁 ,获取失败代表已经有一个实例,则退出\r\nconst getLock = app.requestSingleInstanceLock()\r\nif (!getLock) {\r\n  app.quit()\r\n  process.exit(0)\r\n} else {\r\n  // 试图创建第二实例时 , 如果应用最小化恢复窗口 , 或者聚焦\r\n  app.on('second-instance', () => {\r\n    if (win) {\r\n      if (win.isMinimized()) win.restore()\r\n      win.focus()\r\n    }\r\n  })\r\n}\r\n\r\napp.on('activate',()=>{\r\n  const allWindows = BrowserWindow.getAllWindows()\r\n  if (allWindows.length===0) {\r\n    createWindow()\r\n  }else{\r\n    allWindows[0].focus()\r\n  }\r\n})\r\n\r\n// handle 异步返回ipcRenderer渲染进程的请求信息\r\nipcMain.handle('open-win',(_,arg)=>{\r\n  const childWindow = new BrowserWindow({\r\n    webPreferences: {\r\n      preload,\r\n      sandbox: true\r\n    },\r\n  })\r\n  if (VITE_DEV_SERVER_URL) {\r\n    childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`)\r\n  } else {\r\n    childWindow.loadFile(indexHtml, { hash: arg })\r\n  }\r\n})\r\n\r\nexport function createWindow() {\r\n  win = new BrowserWindow({\r\n    title: 'Main window',\r\n    frame: false,//关闭边框（标题栏，工具栏等）\r\n    titleBarStyle: 'hidden',//隐藏标题栏\r\n    useContentSize: true,\r\n    transparent: false,\r\n    icon: path.join(VITE_PUBLIC, 'icon_rui.ico'),\r\n    webPreferences: {\r\n      sandbox: true,                // 启用沙盒模式 \r\n      nodeIntegration: false,       // 渲染进程是否Node.js 集成\r\n      contextIsolation: true,      //  是否在独立 JavaScript 环境中运行 Electron API和指定的preload 脚本. 默认为 true\r\n      preload, //预加载文件 可以向渲染进程暴露 Node.js API\r\n    },\r\n  })\r\n\r\n  // 开发环境或者打包后的加载路径\r\n  if (VITE_DEV_SERVER_URL) {\r\n    win.loadURL(VITE_DEV_SERVER_URL)\r\n    win?.webContents.openDevTools()\r\n  } else {\r\n    win.loadFile(indexHtml)\r\n  }\r\n\r\n  //加载完成\r\n  win.webContents.on('did-finish-load', () => {\r\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\r\n  })\r\n\r\n  // 渲染进程中请求创建一个新窗口之前被调用\r\n  win.webContents.setWindowOpenHandler(({ url }) => {\r\n    // 使用桌面默认的应用打开\r\n    if (url.startsWith('https:')) shell.openExternal(url)\r\n    return { action: 'deny' }\r\n  })\r\n}\r\n"],"names":[],"mappings":";;;;AAkBA,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAE7D,QAAA,IAAY,WAAW,KAAK,KAAK,WAAW,OAAO;AAG5C,MAAM,YAAY,KAAK,KAAK,QAAA,IAAY,UAAU,eAAe;AAEjE,MAAM,gBAAgB,KAAK,KAAK,QAAA,IAAY,UAAU,MAAM;AAEtD,MAAA,sBAAsB,QAAY,IAAA;AAI/C,MAAM,cAAe,YAAY,cAAc,sBAC3C,KAAK,KAAK,QAAA,IAAY,UAAU,QAAQ,IACxC;AAGJ,IAAI,GAAG,QAAQ,EAAE,WAAW,KAAK,OAAO,4BAA4B;AAEpE,IAAI,MAA4B;AAChC,MAAM,UAAU,KAAK,KAAK,WAAW,sBAAsB;AAC3D,MAAM,YAAY,KAAK,KAAK,eAAe,YAAY;AAGvD,IAAI,UAAA,EAAY,KAAK,YAAY;AAEjC,IAAI,GAAG,qBAAqB,MAAM;AAC1B,QAAA;AACN,MAAI,QAAQ,aAAa,SAAU,KAAI,KAAK;AAC9C,CAAC;AAGD,MAAM,UAAU,IAAI,0BAA0B;AAC9C,IAAI,CAAC,SAAS;AACZ,MAAI,KAAK;AACT,UAAQ,KAAK,CAAC;AAChB,OAAO;AAED,MAAA,GAAG,mBAAmB,MAAM;AAC9B,QAAI,KAAK;AACP,UAAI,IAAI,cAAe,KAAI,QAAQ;AACnC,UAAI,MAAM;AAAA,IAAA;AAAA,EACZ,CACD;AACH;AAEA,IAAI,GAAG,YAAW,MAAI;AACd,QAAA,aAAa,cAAc,cAAc;AAC3C,MAAA,WAAW,WAAS,GAAG;AACZ,iBAAA;AAAA,EAAA,OACV;AACQ,eAAA,CAAC,EAAE,MAAM;AAAA,EAAA;AAExB,CAAC;AAGD,QAAQ,OAAO,YAAW,CAAC,GAAE,QAAM;AAC3B,QAAA,cAAc,IAAI,cAAc;AAAA,IACpC,gBAAgB;AAAA,MACd;AAAA,MACA,SAAS;AAAA,IAAA;AAAA,EACX,CACD;AACD,MAAI,qBAAqB;AACvB,gBAAY,QAAQ,GAAG,mBAAmB,IAAI,GAAG,EAAE;AAAA,EAAA,OAC9C;AACL,gBAAY,SAAS,WAAW,EAAE,MAAM,KAAK;AAAA,EAAA;AAEjD,CAAC;AAEM,SAAS,eAAe;AAC7B,QAAM,IAAI,cAAc;AAAA,IACtB,OAAO;AAAA,IACP,OAAO;AAAA;AAAA,IACP,eAAe;AAAA;AAAA,IACf,gBAAgB;AAAA,IAChB,aAAa;AAAA,IACb,MAAM,KAAK,KAAK,aAAa,cAAc;AAAA,IAC3C,gBAAgB;AAAA,MACd,SAAS;AAAA;AAAA,MACT,iBAAiB;AAAA;AAAA,MACjB,kBAAkB;AAAA;AAAA,MAClB;AAAA;AAAA,IAAA;AAAA,EACF,CACD;AAGD,MAAI,qBAAqB;AACvB,QAAI,QAAQ,mBAAmB;AAC/B,+BAAK,YAAY;AAAA,EAAa,OACzB;AACL,QAAI,SAAS,SAAS;AAAA,EAAA;AAIpB,MAAA,YAAY,GAAG,mBAAmB,MAAM;AAC1C,+BAAK,YAAY,KAAK,6CAA4B,KAAK,GAAE;EAAgB,CAC1E;AAGD,MAAI,YAAY,qBAAqB,CAAC,EAAE,UAAU;AAEhD,QAAI,IAAI,WAAW,QAAQ,EAAG,OAAM,aAAa,GAAG;AAC7C,WAAA,EAAE,QAAQ,OAAO;AAAA,EAAA,CACzB;AACH;"}